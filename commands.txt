echo hello SQL
psql --username=freecodecamp --dbname=postgres

\l
split term

psql:
\l

\c students

\d

\d students

select * from students;

select first_name from students;

select first_name, last_name, gpa from students;

select first_name, last_name, gpa from students where gpa < 2.5;

select first_name, last_name, gpa from students where gpa >= 3.8;

select first_name, last_name, gpa from students where gpa != 4;

select * from majors;

select * from majors where major = 'Game Design';

select * from majors where major != 'Game Design';

select * from majors where major > 'Game Design';

select * from majors where major >= 'Game Design';

select * from majors where major < 'G';

select * from students;

select * from students where last_name < 'M';

select * from students where last_name < 'M' or gpa = 3.9;

select * from students where last_name < 'M' and gpa = 3.9;

select * from students where last_name < 'M' and gpa = 3.9 or gpa < 2.3;

SELECT * FROM students WHERE last_name < 'M' AND (gpa = 3.9 OR gpa < 2.3);
select * from Courses;

select * from courses where course like '_lgorithms';

select * from courses where course like '%lgorithms';

select * from courses where course like 'Web%';

select * from courses where course like '_e%';

select * from courses where course like '% %';

select * from courses where course like '%A%';

select * from courses where course ilike '%A%';

select * from courses where course not ilike '%A%';

SELECT * FROM courses WHERE course NOT ILIKE '%A%' AND course LIKE '% %';

select * from students;

select * from students where gpa is null;

select * from students where gpa is not null;

select * from students where major_id is null;

select * from students where major_id is null and gpa is not null;

select * from students where major_id is null and gpa is null;

select * from students order by gpa;

select * from students order by gpa desc;

select * from students order by gpa desc, first_name;

select * from students order by gpa desc, first_name limit 10;

select * from students where gpa is not null order by gpa desc, first_name limit 10;

select min(gpa) from students;

select max(gpa) from students;

select sum(major_id) from students;

select avg(major_id) from students;

select ceil(avg(major_id)) from students;

select round(avg(major_id)) from students;

select round(avg(major_id),5) from students;

select count(*) from majors;

select count(*) from students;

select count(major_id) from students;

select distinct(major_id) from students;

select major_id from students group by major_id;

SELECT major_id, COUNT(*) FROM students GROUP BY major_id;

select major_id, min(gpa) from students group by major_id;

select major_id, min(gpa), max(gpa) from students group by major_id;

select major_id, min(gpa), max(gpa) from students group by major_id having max(gpa) = 4;

select major_id, min(gpa) as min_gpa, max(gpa) from students group by major_id having max(gpa) = 4;

select major_id, min(gpa) as min_gpa, max(gpa) as max_gpa from students group by major_id having max(gpa) = 4;

select major_id, count(*) as number_of_students from students group by major_id;

select major_id, count(*) as number_of_students from students group by major_id having count(*) < 8;

select * from students full join majors on students.major_id = majors.major_id;

select * from students left join majors on students.major_id = majors.major_id;

select * from students right join majors on students.major_id = majors.major_id;

select * from students inner join majors on students.major_id = majors.major_id;

select * from majors left join students on majors.major_id = students.major_id;

select * from students inner join majors on students.major_id = majors.major_id;

select * from majors right join students on majors.major_id = students.major_id;

select * from students full join majors on students.major_id = majors.major_id;

select * from students inner join majors on students.major_id = majors.major_id;

select major from students inner join majors on students.major_id = majors.major_id;

select distinct(major) from students inner join majors on students.major_id = majors.major_id;

select * from majors left join students on majors.major_id = students.major_id where student_id is null;

select major from majors left join students on majors.major_id = students.major_id where student_id is null;

select * from majors right join students on majors.major_id = students.major_id;

select * from majors right join students on majors.major_id = students.major_id where major = 'Data Science' or gpa >= 3.8;

select first_name, last_name, major, gpa from majors right join students on majors.major_id = students.major_id where major = 'Data Science' or gpa >= 3.8;

select * from students full join majors on students.major_id = majors.major_id;

select * from students full join majors on students.major_id = majors.major_id where first_name like '%ri%' or major like '%ri%';

select first_name, major from students full join majors on students.major_id = majors.major_id where first_name like '%ri%' or major like '%ri%';

select * from students full join majors on students.major_id = majors.major_id;

select students.major_id from students full join majors on students.major_id = majors.major_id;

select students.major_id from students full join majors as m on students.major_id = m.major_id;

select s.major_id from students as s full join majors as m on s.major_id = m.major_id;

select * from students full join majors using(major_id);

select * from students full join majors using(major_id) full join majors_courses using(major_id) full join courses using(course_id);

---------------------------------
bash:
psql -U postgres < students.sql
touch student_info.sh
chmod +x student_info.sh
./student_info.sh

looks:
---------------------------------

#!/bin/bash

# Info about my computer science students from students database

echo -e "\n~~ My Computer Science Students ~~\n"

PSQL="psql -X --username=freecodecamp --dbname=students --no-align --tuples-only -c"

echo -e "\nFirst name, last name, and GPA of students with a 4.0 GPA:"
echo "$($PSQL "SELECT first_name, last_name, gpa FROM students WHERE gpa = 4.0")"

echo -e "\nAll course names whose first letter is before 'D' in the alphabet:"
echo "$($PSQL "SELECT course FROM courses WHERE course < 'D'")"

echo -e "\nFirst name, last name, and GPA of students whose last name begins with an 'R' or after and have a GPA greater than 3.8 or less than 2.0:"
echo "$($PSQL "SELECT first_name, last_name, gpa FROM students WHERE last_name >= 'R' AND (gpa > 3.8 OR gpa < 2.0)")"

echo -e "\nLast name of students whose last name contains a case insensitive 'sa' or have an 'r' as the second to last letter:"
echo "$($PSQL "SELECT last_name FROM students WHERE last_name ILIKE '%sa%' OR last_name ILIKE '%r_'")"

echo -e "\nFirst name, last name, and GPA of students who have not selected a major and either their first name begins with 'D' or they have a GPA greater than 3.0:"
echo "$($PSQL "SELECT first_name, last_name, gpa FROM students WHERE major_id IS NULL AND (first_name LIKE 'D%' OR gpa > 3.0)")"

echo -e "\nCourse name of the first five courses, in reverse alphabetical order, that have an 'e' as the second letter or end with an 's':"
echo "$($PSQL "SELECT course FROM courses WHERE course LIKE '_e%' OR course LIKE '%s' ORDER BY course DESC LIMIT 5")"

echo -e "\nAverage GPA of all students rounded to two decimal places:"
echo "$($PSQL "SELECT ROUND(AVG(gpa), 2) FROM students")"

echo -e "\nMajor ID, total number of students in a column named 'number_of_students', and average GPA rounded to two decimal places in a column name 'average_gpa', for each major ID in the students table having a student count greater than 1:"
echo "$($PSQL "SELECT major_id, COUNT(*) AS number_of_students, ROUND(AVG(gpa), 2) AS average_gpa FROM students GROUP BY major_id HAVING COUNT(*) > 1")"

echo -e "\nList of majors, in alphabetical order, that either no student is taking or has a student whose first name contains a case insensitive 'ma':"
echo "$($PSQL "select major from students full join majors on students.major_id = majors.major_id where major is not null and (student_id is null or first_name ilike '%ma%') order by major")"

echo -e "\nList of unique courses, in reverse alphabetical order, that no student or 'Obie Hilpert' is taking:"
echo "$($PSQL "select distinct(course) from students right join majors using(major_id) inner join majors_courses using(major_id) inner join courses using(course_id) where (first_name = 'Obie' and last_name = 'Hilpert') or student_id is null order by course desc")"

echo -e "\nList of courses, in alphabetical order, with only one student enrolled:"
echo "$($PSQL "select course from students inner join majors_courses using(major_id) inner join courses using(course_id) group by course having count(student_id) = 1 order by course")"

---------------------------------
